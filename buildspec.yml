version: 0.2
env:
  secrets-manager:
    LIQUIBASE_DEV_URL: LIQUIBASE_DEV:host
    LIQUIBASE_DEV_USERNAME: LIQUIBASE_DEV:username
    LIQUIBASE_DEV_PASSWORD: LIQUIBASE_DEV:password
    LIQUIBASE_TESTING_URL: LIQUIBASE_TESTING:host
    LIQUIBASE_TESTING_USERNAME: LIQUIBASE_TESTING:username
    LIQUIBASE_TESTING_PASSWORD: LIQUIBASE_TESTING:password
phases:
  install:
    runtime-versions:
      java: corretto11
    commands: 
        - chmod +x ./liquibase/liquibase
  pre_build:
      commands:
        # Docker Image Tag with Date Time & Code Buiild Resolved Source Version
        - TAG="latest"
        - MANIFEST_FILE_NAME="liquibase-deployment.yml"
        # Update Image tag in our Kubernetes Deployment Manifest        
        - echo "Update Image tag in kube-manifest..."
        - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' kube-manifests/$MANIFEST_FILE_NAME
        # Verify AWS CLI Version        
        - echo "Verify AWS CLI Version..."
        - aws --version
        # Login to ECR Registry for docker to push the image to ECR Repository
        - echo "Login in to Amazon ECR..."
        - $(aws ecr get-login --no-include-email)
        # Update Kube config Home Directory
        - export KUBECONFIG=$HOME/.kube/config
  build:
    commands:
      - echo "Comparing databases DEV to Testing"
      - liquibase --changelog-file=src/main/resources/db/changelog/changes/codebuild-$CODEBUILD_BUILD_NUMBER.xml\
                  --url="jdbc:mysql://$LIQUIBASE_DEV_URL:3306/demo"\
                  --username=$LIQUIBASE_DEV_USERNAME\
                  --password=$LIQUIBASE_DEV_PASSWORD\
                  --referenceUrl="jdbc:mysql://$LIQUIBASE_TESTING_URL:3306/demo"\
                  --referenceUsername=$LIQUIBASE_TESTING_USERNAME\
                  --referencePassword=$LIQUIBASE_TESTING_PASSWORD\
                  --classpath=./liquibase/lib/mysql-connector-java-8.0.12.jar\
                  diff-changelog
      # Build Docker Image
      - echo "Build started on `date`"
      - echo "Building the Docker image..."
      # Package demo via Maven
      - ./mvnw clean package
      - docker build --tag $REPOSITORY_URI:$TAG .
  post_build:
    commands:
      # Push Docker Image to ECR Repository
      - echo "Build completed on `date`"
      - echo "Pushing the Docker image to ECR Repository"
      - docker push $REPOSITORY_URI:$TAG
      - echo "Docker Image Push to ECR Completed -  $REPOSITORY_URI:$TAG"    
      # Extracting AWS Credential Information using STS Assume Role for kubectl
      - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"          
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      # Setup kubectl with our EKS Cluster              
      - echo "Update Kube Config"      
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      # Apply changes to our Application using kubectl
      - echo "Apply changes to kube manifests"            
      - kubectl apply -f kube-manifests/$MANIFEST_FILE_NAME
      - echo "Completed applying changes to Kubernetes Objects"           
      # Create Artifacts which we can use if we want to continue our pipeline for other stages
      - printf '[{"name":"$MANIFEST_FILE_NAME","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json         
artifacts:
  files: 
    - build.json   
    - kube-manifests/*
    - src/main/resources/db/changelog/changes/*